; MARS command codes
CC_SelfTest =            0
CC_CapabilityGet =       1
CC_SequenceHash =        2
CC_SequenceUpdate =      3
CC_SequenceComplete =    4
CC_PcrExtend =           5
CC_RegRead =             6
CC_Derive =              7
CC_DpDerive =            8
CC_PublicRead =          9
CC_Quote =               10
CC_Sign =                11
CC_SignatureVerify =     12

; MARS Return codes
RC_SUCCESS = 0
RC_FAILURE = 2
RC_BUFFER =  4
RC_COMMAND = 5
RC_VALUE =   6
RC_REG =     7
RC_SEQ =     8

RC_ANY_FAILURE  =  RC_FAILURE /
                   RC_BUFFER /
                   RC_COMMAND /
                   RC_VALUE /
                   RC_REG /
                   RC_SEQ

MARS_RC = RC_SUCCESS /
          RC_FAILURE /
          RC_BUFFER /
          RC_COMMAND /
          RC_VALUE /
          RC_REG /
          RC_SEQ

; MARS Capabilities
; number of consecutive PCRs implemented on this MARS
PT_PCR =        1
; number of consecutive TSRs implemented on this MARS
PT_TSR =        2
; size of a digest that can be processed or produced
PT_LEN_DIGEST = 3
; size of signature produced by CryptSign()
PT_LEN_SIGN =   4
; size of symmetric key produced by CryptSkdf()
PT_LEN_KSYM =   5
; size of asymmetric key returned by PublicRead()
PT_LEN_KPUB =   6
; size of private asymmetric key produced by CryptAkdf()
PT_LEN_KPRV =   7
; TCG-registered algorithm for hashing by CryptHash()
PT_ALG_HASH =   8
; TCG-registered algorithm for signing by CryptSign()
PT_ALG_SIGN =   9
; TCG-registered algorithm for symmetric key derivation by CryptSkdf()
PT_ALG_SKDF =   10
; TCG-registered algorithm for asymmetric key derivation by CryptAkdf()
PT_ALG_AKDF =   11

; Implementation specific parameters
uint16 = 0..65535
; Arbitrary length binary data
binary_data = bstr .size (0..2048)

; binary data of length PT_LEN_DIGEST
digest_data = bstr .size 32
; binary data of length PT_LEN_KSYM
ksym_data = bstr .size 32
; binary data of length PT_LEN_KPUB
kpub_data = bstr .size 32
; binary data of length PT_LEN_SIGN
sign_data = bstr .size 32


reg_select_type = uint .size 4

SelfTest = [
    code: CC_SelfTest,
    full_test: bool,
]

CapabilityGet = [
     code: CC_CapabilityGet,
     capability:    PT_PCR /
                    PT_TSR /
                    PT_LEN_DIGEST /
                    PT_LEN_SIGN /
                    PT_LEN_KSYM /
                    PT_LEN_KPUB /
                    PT_LEN_KPRV /
                    PT_ALG_HASH /
                    PT_ALG_SIGN /
                    PT_ALG_SKDF /
                    PT_ALG_AKDF,
]

CapabilityGet_Rsp = uint16

SequenceHash = [
     code: CC_SequenceHash,
]

SequenceUpdate = [
     code:  CC_SequenceUpdate,
     data: binary_data,
]

SequenceUpdate_Rsp = binary_data

SequenceComplete = [
     code: CC_SequenceComplete,
]

SequenceComplete_Rsp = binary_data,

PcrExtend = [
    code: CC_PcrExtend,
    reg_select: reg_select_type,
    digest: digest_data,
]

RegRead = [
    code: CC_RegRead,
    reg_select: reg_select_type,
]

RegRead_Rsp = digest_data,

Derive = [
    code: CC_Derive,
    reg_select: reg_select_type,
    context: binary_data
]

Derive_Rsp = ksym_data

DpDerive = [
    code: CC_DpDerive,
    reg_select: reg_select_type,
    context: nil / binary_data
]

PublicRead = [
    code: CC_PublicRead,
]

PublicRead_Rsp = kpub_data

Quote = [
    code: CC_Quote,
    reg_select: reg_select_type,
    nonce: digest_data,
    context: binary_data
]

Quote_Rsp = sign_data

Sign = [
    code: CC_Sign,
    context: binary_data,
    digest: digest_data,
]

Sign_Rsp = sign_data

SignatureVerify = [
    code: CC_SignatureVerify,
    retricted: bool,
    context: binary_data,
    digest: digest_data,
    signature: sign_data,
]

SignatureVerify_Rsp = bool

; MARS Command
mars_command = SelfTest /
               CapabilityGet /
               SequenceHash /
               SequenceUpdate /
               SequenceComplete /
               PcrExtend /
               RegRead /
               Derive /
               DpDerive /
               PublicRead /
               Quote /
               Sign /
               SignatureVerify

; MARS Response
; To simplify encoding, unconditionally put response code first
; and make data optional.
mars_response = [
     rc:     MARS_RC,
     ? data: CapabilityGet_Rsp /
             SequenceComplete_Rsp /
             RegRead_Rsp /
             Derive_Rsp /
             PublicRead_Rsp /
             Quote_Rsp /
             Sign_Rsp /
             SignatureVerify_Rsp
]
